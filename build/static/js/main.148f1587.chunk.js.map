{"version":3,"sources":["actions/index.js","components/RandomQuote.js","App.js","serviceWorker.js","reducers/randomQuote.js","reducers/index.js","index.js"],"names":["randomQuote","type","RandomQuote","dispatch","useDispatch","quoteText","useSelector","state","currentQuote","quote","quoteAuthor","author","tweetText","id","onClick","href","class","App","quoteImage","image","imageStyle","background","backgroundSize","style","src","Boolean","window","location","hostname","match","quotes","randomQuoteReducer","action","randomIndex","Math","floor","random","length","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAIeA,EAJK,WAClB,MAAO,CAACC,KAAM,gBCuBDC,EApBK,WAClB,IAAMC,EAAWC,cAEXC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAaC,SACpDC,EAAcJ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAaG,UACtDC,EAAY,yCAA2CP,EAAY,KAAOK,EAChF,OACE,yBAAKG,GAAG,iBACN,yBAAKA,GAAG,aACN,wBAAIA,GAAG,QAAQR,GACf,wBAAIQ,GAAG,UAAP,KAAmBH,GACnB,yBAAKG,GAAG,uBACN,4BAAQC,QAAS,kBAAMX,EAASH,MAAgBa,GAAG,aAAnD,aACA,uBAAGE,KAAMH,EAAWC,GAAG,eAAc,uBAAGG,MAAM,+BAA8B,oCCKvEC,EAlBH,WAKV,IAAMC,EAAaZ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAaW,SACrDC,EAAa,CACjBC,WAAY,QAAWH,EAAa,sBACpCI,eAAgB,SAElB,OACE,yBAAKT,GAAG,mBACN,yBAAKU,MAAOH,EAAYI,IAAKN,EAAYL,GAAG,iBAC5C,kBAAC,EAAD,QCLcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBAC,EAAS,CAAC,CACZrB,MAAO,mBACPE,OAAQ,0BACRQ,MAAO,qBAET,CACEV,MAAO,iBACPE,OAAQ,iBACRQ,MAAO,wBAET,CACEV,MAAO,kGACPE,OAAQ,kBACRQ,MAAO,gCAET,CACEV,MAAO,+CACPE,OAAQ,cACRQ,MAAO,6BAET,CACEV,MAAO,0CACPE,OAAQ,6CACRQ,MAAO,2BAET,CACEV,MAAO,kEACPE,OAAQ,mBACRQ,MAAO,uBAET,CACEV,MAAO,+EACPE,OAAQ,kBACRQ,MAAO,gCAET,CACEV,MAAO,qFACPE,OAAQ,sBACRQ,MAAO,4BAwBIY,EAnBY,WAA6B,IAAZC,EAAW,uCAC/CC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWN,EAAOO,QACtD,OAAQL,EAAO/B,MACb,IAAK,cAOL,QACE,MAAO,CACLQ,MAAOqB,EAAOG,GAAaxB,MACzBE,OAAQmB,EAAOG,GAAatB,OAC5BQ,MAAOW,EAAOG,GAAad,SClDtBmB,EAJKC,YAAgB,CAClC/B,aAAcuB,ICMVS,EAAQC,YAAYH,EAAaZ,OAAOgB,8BAAgChB,OAAOgB,gCAErFC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,IAAMK,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SHiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.148f1587.chunk.js","sourcesContent":["const randomQuote = () => {\r\n  return {type: \"RANDOMQUOTE\"};\r\n}\r\n\r\nexport default randomQuote;\r\n","import React from 'react'\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport randomQuote from \"../actions\";\r\n\r\nconst RandomQuote = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const quoteText = useSelector(state => state.currentQuote.quote);\r\n  const quoteAuthor = useSelector(state => state.currentQuote.author);\r\n  const tweetText = \"https://twitter.com/intent/tweet?text=\" + quoteText + \" -\" + quoteAuthor;\r\n  return (\r\n    <div id=\"quote-wrapper\">\r\n      <div id=\"quote-box\">\r\n        <h2 id=\"text\">{quoteText}</h2>\r\n        <h3 id=\"author\">- {quoteAuthor}</h3>\r\n        <div id=\"link-button-wrapper\">\r\n          <button onClick={() => dispatch(randomQuote())} id=\"new-quote\">New Quote</button>\r\n          <a href={tweetText} id=\"tweet-quote\"><i class=\"fab fa-twitter-square fa-2x\"><div></div></i></a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RandomQuote;","import React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport RandomQuote from \"./components/RandomQuote\";\n\nconst App = () => {\n  // const NAME = useSelector(state => state.PROPERTY); Grab a state property, nullifies import/export of the store's states\n  // const dispatch = useDispatch(); Dispatch hook, nullifies import/export of the store\n\n  // To dynamically randomize an element in an array use let randomIndex = Math.floor(Math.random() * array.length); to get a random index for the array in question, then use bracket notation to grab the array element;\n  const quoteImage = useSelector(state => state.currentQuote.image);\n  const imageStyle = {\n    background: \"url('\" +  quoteImage + \"') no-repeat center\",\n    backgroundSize: \"cover\"\n  }\n  return (\n    <div id=\"content-wrapper\">\n      <div style={imageStyle} src={quoteImage} id=\"author-image\"></div>\n      <RandomQuote />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const quotes = [{\r\n    quote: \"I'm pickle Rick!\",\r\n    author: \"Rick, Rick and Mortimer\",\r\n    image: './images/rick.jpg'\r\n  },\r\n  {\r\n    quote: \"So uncivilized\",\r\n    author: \"Obi-wan Kenobi\",\r\n    image: './images/obi-wan.jpg'\r\n  },\r\n  {\r\n    quote: \"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.\",\r\n    author: \"Albert Einstein\",\r\n    image: './images/albert-einstein.jpg'\r\n  },\r\n  {\r\n    quote: \"Be yourself; everyone else is already taken.\",\r\n    author: \"Oscar Wilde\",\r\n    image: './images/oscar-wilde.jpeg'\r\n  },\r\n  {\r\n    quote: \"Without music, life would be a mistake.\",\r\n    author: \"Friedrich Nietzsche, Twilight of the Idols\",\r\n    image: './images/nietzsche.jpeg'\r\n  },\r\n  {\r\n    quote: \"I have not failed. I've just found 10,000 ways that won't work.\",\r\n    author: \"Thomas A. Edison\",\r\n    image: './images/edison.jpg'\r\n  },\r\n  {\r\n    quote: \"If you can't explain it to a six year old, you don't understand it yourself.\",\r\n    author: \"Albert Einstein\",\r\n    image: './images/albert-einstein.jpg'\r\n  },\r\n  {\r\n    quote: \"I'm not upset that you lied to me, I'm upset that from now on I can't believe you.\",\r\n    author: \"Friedrich Nietzsche\",\r\n    image: './images/nietzsche.jpeg'\r\n  },\r\n];\r\n\r\n// To dynamically randomize an element in an array use Math.floor(Math.random() * array.length); to get a random index for the array in question, then use bracket notation to grab the array element;\r\nconst randomQuoteReducer = (state = quotes, action) => {\r\n  const randomIndex = Math.floor(Math.random() * quotes.length);\r\n  switch (action.type) {\r\n    case \"RANDOMQUOTE\":\r\n      return {\r\n        quote: quotes[randomIndex].quote,\r\n          author: quotes[randomIndex].author,\r\n          image: quotes[randomIndex].image\r\n      };\r\n\r\n    default:\r\n      return {\r\n        quote: quotes[randomIndex].quote,\r\n          author: quotes[randomIndex].author,\r\n          image: quotes[randomIndex].image\r\n      };\r\n  }\r\n}\r\n\r\nexport default randomQuoteReducer;","import {combineReducers} from \"redux\";\r\nimport randomQuoteReducer from \"./randomQuote\";\r\n\r\nconst allReducers = combineReducers({\r\n  currentQuote: randomQuoteReducer\r\n});\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport allReducers from \"./reducers\";\nimport {Provider} from \"react-redux\";\n\n//STORE\nconst store = createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}